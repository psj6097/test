* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

#main-grid-wrapper {
    display: grid;
    /* grid-template-rows: 60px 360px 100vh 180px;
    grid-template-columns: 320px 1fr; */
    grid-template:
        "header header" 60px
        "banner banner" 360px
        "aside main" 1fr
        "footer footer" 180px
        / 320px 1fr;
}

#main-header {
    background-color: rgb(255, 173, 173);
    /* grid-column: 1 / 3; */
    grid-area: header;
}

#main-banner-wrapper {
    background-color: rgb(255, 255, 173);
    grid-area: banner;
}

#main-banner-container {
    width: 1080px;
    height: 100%;
    margin: 0 auto;
    background-color: rgb(179, 179, 242);
    display: grid;
    grid-template-rows: 360px;
    grid-template-columns: repeat(4, 1080px);
    overflow: hidden;
}

#main-container-side {
    background-color: rgb(57, 207, 57);
    /* grid-column: 1 / 2; */
    grid-area: aside;
}

#main-container {
    background-color: rgb(255, 204, 110);
    /* grid-column: 2/ 3; */
    grid-area: main;
    display: grid;
    justify-content: center;
    align-items: center;
    grid-template-columns: repeat(3, 30%);
    grid-template-columns: repeat(auto-fit, 320px);
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    /* 
        repeat(n, 크기), auto-fit은 부모 요소 크기에 맞는 값 계산
        minmax(최솟값, 최대값), 줄어들거나 더 늘어나지 않도록 설정 가능
    */
    gap: 10px;
}

#main-container > .main-product-item {
    height: 200px;
    background-color: rgb(255, 92, 235);
}

footer {
    background-color: #eee;
    /* grid-column: 1 / 3; */
    grid-area: footer;
}

/* 
    가급적 정렬 요소는 플렉스로 구현하는 것이 훨씬 편리
    하지만 바둑판의 형태나, UI의 순서가 바뀌어야하는 경우라면 grid 레이아웃
    따라서 필요에 의하여 구현하는것이 가장 좋습니다.

    반드시 grid나 flex로 구현해야하는 경우 없음
    다만 다소 편리할 뿐

    css가 익숙해질 때까지
    그리드 레이아웃을 사용하는 것은 지양

    보통 하나의 페이즈를 여러분이
    큰 도움 없이, 완성할 수 있을 때
    (css가 익숙해졌을 때)

    display : flex 정렬을 위해 사용해도 괜찮다
*/
